#!/usr/bin/env node
require("babel-register");
require("babel-polyfill");

const dotenv = require("dotenv");
dotenv.config();

const NODE_ENV = process.env.NODE_ENV;
if( NODE_ENV === "development") dotenv.config({path: ".env.development"});
if(NODE_ENV === "production") dotenv.config({path: ".env.production"});

const dbConnection = require("../middlewares/db/connection");
dbConnection.connect().then(function(){
  const http = require("http");
  const app  = require("../app");
  const port = normalizePort(process.env.NODE_PORT || 3000);
  const server = http.createServer(app.callback());
  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);
  server.timeout = 0;
  
  function normalizePort(val) {
    const _port = parseInt(val, 10);
  
    if (isNaN(_port)) return val;
    if (_port >= 0) return _port;
  
    return false;
  }
  
  function onError(error) {
    if (error.syscall !== "listen") throw error;
  
    const bind = typeof port === "string"
      ? `Pipe ${port}`
      : `Port ${port}`;
  
    switch (error.code) {
    case "EACCES":
              console.error(`${bind} requires elevated privileges`) // eslint-disable-line
      process.exit(1);
      break;
    case "EADDRINUSE":
              console.error(`${bind} is already in use`) // eslint-disable-line
      process.exit(1);
      break;
    default:
      throw error;
    }
  }
  
  function onListening() {
    const addr = server.address();
    const bind = typeof addr === "string"
      ? `pipe ${addr}`
      : `port ${addr.port}`;
    console.log(`Listening on ${bind}`); // eslint-disable-line no-console
  }
});


